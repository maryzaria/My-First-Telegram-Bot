import os
from dotenv import load_dotenv
from telebot import TeleBot, types


from validator import valid_date, message_to_task
from buttons import make_buttons, new_items, new_tasks


load_dotenv()
token = os.getenv('TOKEN')

bot = TeleBot(token)

tasks = {}
item_list = []


@bot.message_handler(commands=['help'])
def print_help(message):
    text = {
        '/help': '–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
        '/add <–∑–∞–¥–∞—á–∞ –¥–∞—Ç–∞>': '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫',
        '/show <–¥–∞—Ç–∞>': '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É',
        '/all': '–ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
        '/remove <–∑–∞–¥–∞—á–∞>': '—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É',
        '/clear': '—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏',
        '/move <–∑–∞–¥–∞—á–∞ –¥–∞—Ç–∞>': '–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É',
        '/shop <—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫>': '—Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'
    }
    bot.send_message(message.chat.id, '\n'.join([f"{key} - {val}" for key, val in text.items()]))


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = types.KeyboardButton('–í—Å–µ –∑–∞–¥–∞—á–∏')
    item3 = types.KeyboardButton('–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    item4 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    item5 = types.KeyboardButton('–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
    markup.add(item2, item3, item4, item5)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}', reply_markup=markup)


@bot.message_handler(commands=['add'])
def add(message):
    dt, task = valid_date(message.text), message_to_task(message.text.strip('/add'))
    if '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑' in dt:
        bot.send_message(message.chat.id, dt)
    else:
        tasks.setdefault(dt, []).append(task)
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ "{task}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {dt}')


@bot.message_handler(commands=['show'])
def show(message):
    try:
        date = valid_date(message.text.split()[1].lower())
        text = tasks.get(date, '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–¥–∞—á')
        if isinstance(text, list):
            text = '\n'.join([f"üîπ{v}" for v in text])
        bot.send_message(message.chat.id, text)
    except IndexError:
        bot.send_message(message.chat.id, '—É–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')


@bot.message_handler(func=lambda m: m.text in ('–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', '–í—Å–µ –∑–∞–¥–∞—á–∏', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'))
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
            bot.send_message(message.chat.id, '–Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤')
            bot.register_next_step_handler(message, shop)
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
            bot.send_message(message.chat.id, '–Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –µ–µ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(message, add)
        if message.text == '–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            tasks_today(message)
        if message.text == '–í—Å–µ –∑–∞–¥–∞—á–∏':
            show_all(message)


@bot.message_handler(commands=['all'])
def show_all(message):
    if not tasks:
        text = '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á'
    else:
        text = '\n'.join([str(day) + ':\n' + '\n'.join([f"üîπ{d}" for d in tasks[day]]) for day in tasks])
    print(text)
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['remove'])
def remove(message):
    task = message.text.split(maxsplit=1)[1]
    print(task)
    text = f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    for items in tasks.values():
        if task in items:
            items.remove(task)
            text = f'–ó–∞–¥–∞—á–∞ "{task}" —É–¥–∞–ª–µ–Ω–∞'
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['clear'])
def clear(message):
    tasks.clear()
    bot.send_message(message.chat.id, '–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã')


@bot.message_handler(commands=['move'])
def move(message):
    task, date = message_to_task(message.text.stpip('/move')), valid_date(message.text)
    text = f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    for old_date, items in tasks.items():
        if task in items:
            items.remove(task)
            text = f'–ó–∞–¥–∞—á–∞ "{task}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ {date}'
    tasks.setdefault(date, []).append(task)
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['shop'])
def shop(message):  # types.Message
    items = message.text.strip('/shop').split(",") if ',' in message.text else message.text.strip('/shop').split()
    item_list.clear()
    item_list.extend(items)
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', reply_markup=make_buttons(items))


@bot.message_handler(commands=['today'])
def tasks_today(message):
    today = valid_date('—Å–µ–≥–æ–¥–Ω—è')
    if today in tasks:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', reply_markup=make_buttons(tasks[today]))
    else:
        bot.send_message(message.chat.id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ üòâ')


@bot.callback_query_handler(lambda c: True)  # lambda c: c.data == 'butt_id'
def answer(call):  # : types.callback_query
    if call.message.text == '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
        replay = new_items(call.data, item_list)
        if len(item_list) != 0 and len(tuple(filter(lambda x: '‚úÖ' in x, item_list))) == len(item_list):
            bot.answer_callback_query(call.id, text='–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É', show_alert=True)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
                              reply_markup=replay, parse_mode='MarkdownV2')

    elif call.message.text == '–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        today_tasks = tasks[valid_date('—Å–µ–≥–æ–¥–Ω—è')]
        replay = new_tasks(call.data, today_tasks)
        if len(today_tasks) != 0 and len(tuple(filter(lambda x: '–í–´–ü–û–õ–ù–ï–ù–û' in x, today_tasks))) == len(today_tasks):
            bot.answer_callback_query(call.id, text='–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', show_alert=True)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –¥–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω')
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                              reply_markup=replay, parse_mode='MarkdownV2')


if __name__ == '__main__':
    # –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º
    bot.polling(none_stop=True)



