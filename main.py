import os
import logging
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from telebot import TeleBot, types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from validator import valid_date, message_to_task
from sql_requests_class import SQLRequests


logging.basicConfig(level=logging.INFO, filename="py_log.log",
                    filemode="a", format="%(asctime)s %(levelname)s %(message)s")

load_dotenv()
token = os.getenv('TOKEN')
bot = TeleBot(token)

command_messages = ('–í—Å–µ –∑–∞–¥–∞—á–∏', '–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
                    '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', '–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')


@bot.message_handler(commands=['help'])
def print_help(message):
    text = {
        '/help': '–≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
        '/add <–∑–∞–¥–∞—á–∞ –¥–∞—Ç–∞>': '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫',
        '/show <–¥–∞—Ç–∞>': '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É',
        '/all': '–ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
        '/remove <–∑–∞–¥–∞—á–∞>': '—É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É',
        '/move <–∑–∞–¥–∞—á–∞ –¥–∞—Ç–∞>': '–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É',
        '/shop <—Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫>': '—Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫'
    }
    bot.send_message(message.chat.id, '\n'.join([f"{key} - {val}" for key, val in text.items()]))


@bot.message_handler(commands=['start'])
def start(message):
    req.create_db(message)
    name = message.chat.first_name if message.chat.first_name else ''
    logging.info(f'added user {message.chat.id}, {name} to database')
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–í—Å–µ –∑–∞–¥–∞—á–∏')
    item2 = types.KeyboardButton('–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    item3 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    item4 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
    item5 = types.KeyboardButton('–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')
    markup.add(item1, item2, item3, item4, item5)
    text = f'–ü—Ä–∏–≤–µ—Ç, {name}' if name else '–ü—Ä–∏–≤–µ—Ç'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['add'])
def add(message):
    req.create_db(message)
    dt, task = valid_date(message.text), message_to_task(message.text.strip('/add'))
    if '–≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞—á–µ–π' in dt:
        n = req.select_n(message)
        if n <= 2:
            bot.send_message(message.chat.id, dt)
            req.update_n(message, n + 1)
            bot.register_next_step_handler(message, add)
        else:
            req.update_n(message, 0)
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É')
            logging.warning(f'ADD: user {message.chat.id} entered the task "{task}" incorrectly several times')
    else:
        req.update_n(message, 0)
        req.insert_task_db(message, task, dt)
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ "{task}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {dt}')
        logging.info(f'ADD: user {message.chat.id} added task')


@bot.message_handler(commands=['show'])
def show(message):
    try:
        dt = valid_date(message.text.split()[1].lower())
        text = '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–¥–∞—á'
        res = [task[0] for task in req.select_today(message, dt)]
        if res:
            text = '\n'.join([f"üîπ{v}" for v in res])
        bot.send_message(message.chat.id, text)
    except Exception as err:
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
        logging.error(f'SHOW: the user {message.chat.id} did not specify a date, error: {err}')


@bot.message_handler(func=lambda m: m.text in command_messages)
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == '–°–æ—Å—Ç–∞–≤–∏—Ç—å c–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
            bot.send_message(message.chat.id, '–Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫')
            bot.register_next_step_handler(message, shop)
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
            bot.send_message(message.chat.id, '–Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –µ–µ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(message, add)
        if message.text == '–î–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            todo_today(message)
        if message.text == '–í—Å–µ –∑–∞–¥–∞—á–∏':
            show_all(message)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É':
            bot.send_message(message.chat.id, '–Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å')
            bot.register_next_step_handler(message, remove)


@bot.message_handler(commands=['all'])
def show_all(message):
    tasks = {}
    for dt, task in sorted(req.select_all(message), key=lambda x: datetime.strptime(x[0], '%d.%m.%Y')):
        if datetime.strptime(dt, '%d.%m.%Y') < datetime.today() - timedelta(days=1):
            req.delete_task(message, task)
        else:
            tasks.setdefault(dt, []).append(task)
    if not tasks:
        text = '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á'
    else:
        text = '\n\n'.join([day + ':\n' + '\n'.join([f"üîπ{d}" for d in tasks[day]]) for day in tasks])
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['remove'])
def remove(message):
    task = message.text.strip('/remove')
    if req.select_task(message, task):
        req.delete_task(message, task)
        text = f'–ó–∞–¥–∞—á–∞ "{task}" —É–¥–∞–ª–µ–Ω–∞'
        logging.info(f'REMOVE: user {message.chat.id} remove task "{task}"')
    else:
        text = f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        logging.error(f'REMOVE: user {message.chat.id}, task "{task}" not found')
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['move'])
def move(message):
    task, dt = message_to_task(message.text.strip('/move')), valid_date(message.text)
    if req.select_task(message, task):
        req.delete_task(message, task)
        req.insert_task_db(message, task=task, date=dt)
        text = f'–ó–∞–¥–∞—á–∞ "{task}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ {dt}'
        logging.info(f'MOVE: user {message.chat.id} move task "{task}" to date {dt}')
    else:
        text = f'–ó–∞–¥–∞—á–∞ "{task}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        logging.error(f'MOVE: user {message.chat.id}, task "{task}" not found')
    bot.send_message(message.chat.id, text)


def make_buttons(data: list):
    markup = InlineKeyboardMarkup()
    button_list = list(InlineKeyboardButton(text=item, callback_data=f'{item}') for item in data)
    for but in button_list:
        markup.add(but)
    return markup


@bot.message_handler(commands=['shop'])
def shop(message):  # types.Message
    items = message.text.strip('/shop').strip(' ,.!-?/*').split(", ") if ',' in message.text \
        else message.text.strip('/shop').strip(' ,.!-?/*').split()
    req.create_db(message, shop=True)
    for item in items:
        req.insert_task_db(message, shop=True, item_name=item)
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', reply_markup=make_buttons(items))
    logging.info(f'the user {message.chat.id} made a shopping list')


@bot.message_handler(commands=['today'])
def todo_today(message):
    tasks_today = [task[0] for task in req.select_today(message, date.strftime(date.today(), '%d.%m.%Y'))]
    print(tasks_today)
    if tasks_today:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', reply_markup=make_buttons(tasks_today))
    else:
        bot.send_message(message.chat.id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª –Ω–µ—Ç, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ üòâ')


@bot.callback_query_handler(lambda c: True)
def answer(call):  # : types.callback_query
    if call.message.text == '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
        req.update_tasks(call.message, call.data, shop=True)
        item_list = [item[0] for item in req.select_today(call.message, shop=True)]
        replay = make_buttons(item_list)
        if len(item_list) != 0 and len(tuple(filter(lambda x: '‚úÖ' in x, item_list))) == len(item_list):
            bot.answer_callback_query(call.id, text='–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫—É', show_alert=True)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            req.delete_items(call.message, item_list)
            logging.info(f'user {call.message.chat.id} closed shopping list')
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫',
                              reply_markup=replay, parse_mode='MarkdownV2')

    elif call.message.text == '–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:':
        istoday = date.strftime(date.today(), '%d.%m.%Y')
        req.update_tasks(call.message, call.data, istoday)
        today_tasks = [task[0] for task in req.select_today(call.message, istoday)]
        replay = make_buttons(today_tasks)
        if len(today_tasks) != 0 and len(tuple(filter(lambda x: '‚úÖ' in x, today_tasks))) == len(today_tasks):
            bot.answer_callback_query(call.id, text='–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', show_alert=True)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –¥–µ–ª –∑–∞–≤–µ—Ä—à–µ–Ω')
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:',
                              reply_markup=replay, parse_mode='MarkdownV2')


if __name__ == '__main__':
    # –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–µ–ª–µ–≥—Ä–∞–º
    req = SQLRequests()
    try:
        bot.polling(none_stop=True)
        logging.info(f'successful authorization')
    except Exception as err:
        logging.critical(f'authorization failed, error{err}')
